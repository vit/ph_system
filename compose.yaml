
name: ph_system_${ENV_NAME}

services:

  mongo:
    # image: mongo:3.2
    # image: mongo:3.4
    # image: mongo:3.6
    # image: mongo:4.0
    image: mongo:4.2
    restart: always
    container_name: ph_system_mongo_${ENV_NAME}
    expose:
      - "27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - mongo-data:/data/db
    networks:
      - mongo

  # lib_clojure:
  #   restart: always
  #   container_name: ph_system_lib_clojure_${ENV_NAME}
  #   build: 
  #     # context: ./clojure
  #     # dockerfile: Dockerfile_Clojure
  #     # context: ./docker/lib_clojure/
  #     # dockerfile: Dockerfile_Clojure
  #     context: ./lib_clojure/
  #     dockerfile: ./docker/Dockerfile_Clojure
  #   expose:
  #     - "9000"
  #   volumes:
  #     # - ./app/lib:/usr/src/app
  #     - ./lib_clojure/app:/usr/src/app
  #   environment:
  #     IPACS_DOMAIN_NAME: ${IPACS_DOMAIN_NAME}
  #     COMS_DOMAIN_NAME: ${COMS_DOMAIN_NAME}
  #     CAP_DOMAIN_NAME: ${CAP_DOMAIN_NAME}
  #     LIB_DOMAIN_NAME: ${LIB_DOMAIN_NAME}
  #     CONF_DOMAIN_NAME: ${CONF_DOMAIN_NAME}
  #     ALBUM_DOMAIN_NAME: ${ALBUM_DOMAIN_NAME}
  #     VIRTUAL_HOST:
  #       ${LIB2_DOMAIN_NAME},
  #     LETSENCRYPT_HOST:
  #       ${LIB2_DOMAIN_NAME},
  #   networks:
  #     - frontend
  #     - mongo
  #   links:
  #     - mongo

  nginx:
    restart: always
    container_name: ph_system_web_${ENV_NAME}
    build: 
      context: ./coms_php/nginx
      dockerfile: Dockerfile_Nginx
    expose:
      - "80"
    volumes:
      # - ./app/coms:/var/www/html
      - ./coms_php/app:/var/www/html
      - backup:/data/backup
    secrets:
      - htpasswd-coms
    environment:
      VIRTUAL_HOST:
        ${COMS_DOMAIN_NAME},
      LETSENCRYPT_HOST:
        ${COMS_DOMAIN_NAME},
    networks:
      - frontend
      - php
    links:
      - php-fpm

  php-fpm:
    restart: always
    container_name: ph_system_php_${ENV_NAME}
    build: 
      context: ./coms_php/php
      dockerfile: Dockerfile_PhpFpm
    expose:
      - "9000"
    volumes:
      # - ./app/coms:/var/www/html
      - ./coms_php/app:/var/www/html
      - coms-papers:/data/papers
      - backup:/data/backup
    networks:
      - php
      - pg
      - smtp

  php-cron:
    restart: always
    container_name: ph_system_cron_${ENV_NAME}
    build: 
      context: ./coms_php/php
      dockerfile: Dockerfile_PhpCron
    volumes:
      # - ./app/coms:/var/www/html
      - ./coms_php/app:/var/www/html
      - coms-papers:/data/papers
    networks:
      - php
      - pg
      - smtp

  postgres:
    restart: always
    container_name: ph_system_pg_${ENV_NAME}
    build: 
      # context: ./pg
      # dockerfile: Dockerfile_Pg
      context: ./coms_php/pg
      dockerfile: Dockerfile_Pg
    volumes:
      - pg-data:/var/lib/postgresql/data
      - backup:/data/backup
    environment:
      POSTGRES_USER: "root"
      POSTGRES_PASSWORD: "root"
    expose:
      - "5432"
    networks:
      - pg

  postfix:
    restart: always
    container_name: ph_system_mail_${ENV_NAME}
    build: 
      context: ./postfix
      dockerfile: Dockerfile
    expose:
      - "25"
    environment:
      maildomain: ${IPACS_MAIL_DOMAIN_NAME}
      smtp_user: sender:love
    secrets:
      - mail.private
    networks:
      - smtp

  api:
    restart: always
    container_name: ph_system_api_${ENV_NAME}
    build: 
      # context: ./docker/api_python
      # dockerfile: Dockerfile_API_Python
      context: ./api_python
      dockerfile: ./docker/Dockerfile_API_Python
    # command: ["python", "api.py"]
    stdin_open: true # docker run -i
    tty: true        # docker run -t
    volumes:
      # - ./app/api:/app
      - ./api_python/app:/app
      - coms-papers:/data/papers
    secrets:
      - htpasswd-coms
      - jwt-secret-key
    expose:
      - "5000"
    environment:
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES}
      VIRTUAL_HOST: ${API_DOMAIN_NAME}
      LETSENCRYPT_HOST: ${API_DOMAIN_NAME}
      POSTGRES_USER: "root"
      POSTGRES_PASSWORD: "root"
      MONGO_URI: "mongodb://root:example@ph_system_mongo_${ENV_NAME}:27017"
    # ports:
    #   - "5000:5000"
    networks:
      - frontend
      - pg
      - mongo

  lib_go:
    restart: always
    container_name: ph_system_lib_go_${ENV_NAME}
    build: 
      # context: .
      # dockerfile: ./docker/lib_go/Dockerfile_Go
      context: ./lib_go
      dockerfile: ./docker/Dockerfile_Go
    expose:
      - "8080"
    # volumes:
    #   - ./app/lib:/usr/src/app
    environment:
      GIN_MODE: release
      IPACS_DOMAIN_NAME: ${IPACS_DOMAIN_NAME}
      COMS_DOMAIN_NAME: ${COMS_DOMAIN_NAME}
      CAP_DOMAIN_NAME: ${CAP_DOMAIN_NAME}
      LIB_DOMAIN_NAME: ${LIB_DOMAIN_NAME}
      # LIB2_DOMAIN_NAME: ${LIB2_DOMAIN_NAME}
      CONF_DOMAIN_NAME: ${CONF_DOMAIN_NAME}
      ALBUM_DOMAIN_NAME: ${ALBUM_DOMAIN_NAME}
      VIRTUAL_HOST:
        ${LIB_DOMAIN_NAME},
      LETSENCRYPT_HOST:
        ${LIB_DOMAIN_NAME},
      MONGO_URI: "mongodb://root:example@ph_system_mongo_${ENV_NAME}:27017"
    networks:
      - frontend
      - mongo
    links:
      - mongo



secrets:
  mail.private:
    file: .secrets/domainkeys/mail.private
  htpasswd-coms:
    file: .secrets/web/htpasswd-coms
  jwt-secret-key:
    file: .secrets/api/jwt_secret_key

volumes:
  mongo-data:
  pg-data:
  coms-papers:
  opendkim-domainkeys:
  backup:

networks:
  frontend:
    external: true 
    name: frontend 
  mongo:
  php:
  pg:
  smtp:
